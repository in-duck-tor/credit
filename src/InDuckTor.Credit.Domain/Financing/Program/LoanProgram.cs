using InDuckTor.Credit.Domain.LoanManagement;

namespace InDuckTor.Credit.Domain.Financing.Program;

// Вообще программа должна определять тип кредита, категорию заёмщика, максимальные сроки на различные цели и т.д.
// По сути программа должна определять все возможные параметры кредита.
// В нашем же случае, т.к. это сложно, ограничимся только процентной ставкой.

// 1. Пользователь (П) получает доступные ему кредитные программы (сейчас все)
// 2. П выбирает нужную программу и выбирает остальные параметры: Срок и Сумму Займа
// 3. П отправляет заявку на оформление кредита, которая попадает в нашу систему в виде:
//  Информация о П + Выбранные параметры + Программа кредитования
// 4. Если заявка не удовлетворяет условиям (например Программе кредитования или заработная плата П недостаточно велика),
//  она отклоняется автоматически. Если заявка удовлетворяет условиям, она либо сохраняется в системе, чтобы её в будущем проверил человек,
//  либо сразу одобряется и создаётся новая сущность Кредита (Loan)
// 5. Мы уже знаем, что Заявка на Кредит валидна, поэтому сущность Кредита просто получает все нужные данные и,
// через LoanService, для неё рассчитывается всё необходимое (количество платежей, например), после чего сущность сохраняется в состоянии Approved 

/// <summary>
/// <b>Программа кредитования</b>
/// </summary>
public class LoanProgram
{
    public long Id { get; set; }

    /// <summary>
    /// <b>Процентная Ставка</b> по программе кредитования
    /// </summary>
    public required decimal InterestRate { get; set; }

    public required PaymentType PaymentType { get; set; }

    // Календарный пока не работает(
    public required PaymentScheduleType PaymentScheduleType { get; set; }

    // /// <summary>
    // /// <b>Календарный день начала и конца Расчётного Периода</b>
    // /// </summary>
    // public int? PeriodDay { get; set; }

    /// <summary>
    /// <b>Длительность Расчётного Периода</b>. 
    /// </summary>
    public TimeSpan? PeriodInterval { get; set; }
}